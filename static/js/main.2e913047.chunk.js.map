{"version":3,"sources":["components/CitySearch.js","components/ResultCity.js","components/App.js","serviceWorker.js","index.js"],"names":["CitySearch","props","react_default","a","createElement","onSubmit","submitForm","type","value","inputValue","onChange","inputChange","placeholder","ResultCity","_props$weather","weather","error","city","sunrise","sunset","temperature","pressure","wind","result","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","concat","App","state","date","handleInputChange","e","_this","setState","target","handleSubmitForm","preventDefault","console","log","API","fetch","then","response","ok","json","data","dt","sys","main","temp","speed","catch","prevState","components_CitySearch","this","src_components_ResultCity","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAgBeA,SAdI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,SAAYJ,EAAMK,YACtBJ,EAAAC,EAAAC,cAAA,SACEG,KAAO,OACPC,MAASP,EAAMQ,WACfC,SAAYT,EAAMU,YAClBC,YAAc,iBAEhBV,EAAAC,EAAAC,cAAA,oCCuBSS,SA/BI,SAACZ,GAAU,IAAAa,EACwCb,EAAMc,QAAnEC,EADqBF,EACrBE,MAAQC,EADaH,EACbG,KAAMC,EADOJ,EACPI,QAASC,EADFL,EACEK,OAAOC,EADTN,EACSM,YAAaC,EADtBP,EACsBO,SAAUC,EADhCR,EACgCQ,KAExDC,EAAS,KAEb,IAAIP,GAASC,EAAK,CAEhB,IAAMO,EAAc,IAAIC,KAAe,IAAVP,GAAgBQ,qBAEvCC,EAAa,IAAIF,KAAc,IAATN,GAAeO,qBAE3CH,EACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKa,GACLf,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,IAAsBR,EAAtB,UACAlB,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,WAAb,+BAAuCJ,GACvCtB,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,UAAb,+BAAsCD,GACtCzB,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,QAAb,mCAAsCN,EAAtC,QACApB,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,YAAb,mBAAoCP,EAApC,SAMN,OACEnB,EAAAC,EAAAC,cAAA,OAAKwB,UAAY,UACdZ,EAAK,oBAAAa,OAAuBZ,GAAQM,KC8C5BO,6MAnEbC,MAAQ,CACNvB,MAAO,GACPwB,KAAM,GACNf,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,YAAa,GACbC,SAAU,GACVC,KAAM,GACNN,MAAO,MAGTiB,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZ5B,MAAO0B,EAAEG,OAAO7B,WAIpB8B,iBAAmB,SAAAJ,GACjBA,EAAEK,iBACFC,QAAQC,IAAI,0BACZ,IAAMC,EAAG,oDAAAb,OAAuDM,EAAKJ,MAAMvB,MAAlE,wDAETmC,MAAMD,GACLE,KAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,IAIVD,KAAK,SAAAC,GAAQ,OAAIA,EAASE,SAC1BH,KAAK,SAAAI,GACJb,EAAKC,SAAS,CACZpB,OAAO,EACPgB,KAAMgB,EAAKC,GACXhC,KAAMkB,EAAKJ,MAAMvB,MACjBU,QAAS8B,EAAKE,IAAIhC,QAClBC,OAAQ6B,EAAKE,IAAI/B,OACjBC,YAAa4B,EAAKG,KAAKC,KACvB/B,SAAU2B,EAAKG,KAAK9B,SACpBC,KAAM0B,EAAK1B,KAAK+B,UAGnBC,MACCnB,EAAKC,SAAS,SAAAmB,GAAS,MAAK,CAC1BvC,OAAO,EACPC,KAAMsC,EAAU/C,mFAMpB,OACEN,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAACoD,EAAD,CACE/C,WAAYgD,KAAK1B,MAAMvB,MACvBG,YAAa8C,KAAKxB,kBAClB3B,WAAcmD,KAAKnB,mBAErBpC,EAAAC,EAAAC,cAACsD,EAAD,CACE3C,QAAW0C,KAAK1B,gBA7DR4B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.2e913047.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CitySearch = (props) => {\r\n  return ( \r\n    <form onSubmit = {props.submitForm}>\r\n      <input \r\n        type = \"text\" \r\n        value = {props.inputValue}\r\n        onChange = {props.inputChange}\r\n        placeholder = \"Wpisz miasto\"\r\n      />\r\n      <button >Wyszukaj misato</button>\r\n    </form>\r\n   );\r\n}\r\n \r\nexport default CitySearch;\r\n\r\n\r\n","import React from 'react';\r\nimport './ResultCity.css';\r\n\r\nconst ResultCity = (props) => {\r\n  const {error,  city, sunrise, sunset,temperature, pressure, wind} = props.weather;\r\n\r\n  let result = null\r\n\r\n  if(!error && city){\r\n\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\r\n\r\n    result = (\r\n      <div>\r\n        <h2>{city}</h2>\r\n        <p className=\"temp\"> {temperature} &#176;C</p>\r\n        <p className=\"sunrise\">Wschód słońca: {sunriseTime}</p>\r\n        <p className=\"sunset\">Zachód słońca: {sunsetTime}</p>\r\n        <p className=\"wind\">Prędkość wiatru: {wind} m/s</p>\r\n        <p className=\"pressure\">Ciśnienie: {pressure} hPa</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  return ( \r\n    <div className = \"result\">\r\n      {error ? `Nie mamy w bazie ${city}`: result }\r\n    </div>\r\n   );\r\n}\r\n \r\nexport default ResultCity;","import React, {Component} from 'react';\nimport './App.css';\nimport CitySearch from './CitySearch';\nimport ResultCity from './ResultCity';\n\n\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temperature: \"\",\n    pressure: \"\",\n    wind: \"\",\n    error: \"\",\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleSubmitForm = e => {\n    e.preventDefault()\n    console.log(\"Potwierdzony formularz\")\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=aa6dd97573b2006f7f7377c095f1392a&units=metric`;\n\n    fetch(API)\n    .then(response => {\n      if(response.ok) {\n        return response\n      }\n      //throw Error(\"Nie udało się!!\")\n    })\n    .then(response => response.json())\n    .then(data => {\n      this.setState({\n        error: false,\n        date: data.dt,\n        city: this.state.value,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temperature: data.main.temp,\n        pressure: data.main.pressure,\n        wind: data.wind.speed,\n      })\n    })\n    .catch(\n      this.setState(prevState => ({\n        error: true,\n        city: prevState.value\n      }))\n    )\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <CitySearch \n          inputValue={this.state.value} \n          inputChange={this.handleInputChange}\n          submitForm = {this.handleSubmitForm}\n        />\n        <ResultCity \n          weather = {this.state}  \n        />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}